# LANGUAGE SERVERS CONFIGURATION

[language-server.astro-ls]
command = "astro-ls"
args = ["--stdio"]
config = { typescript = { tsdk = "~/.volta/tools/image/packages/typescript/lib/node_modules/typescript/lib" }, environment = "node"}

[language-server.tailwindcss-ls]
command = "tailwindcss-language-server"
args = ["--stdio"]
config = { userLanguages = { astro = "html", "*.astro" = "html" }}

[language-server.emmet-ls]
command = "emmet-language-server"
args = ["--stdio"]

[language-server.eslint-ls]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.eslint-ls.config]
validate = "on"
experimental = { useFlatConfig = false }
rulesCustomizations = []
run = "onType"
problems = { shortenToSingleLine = false }
nodePath = ""

[language-server.eslint-ls.config.codeAction]
disableRuleComment = { enable = true, location = "separateLine" }
showDocumentation = { enable = true }
# onSave = { enable = true, mode = "fixAll" }
[language-server.eslint-ls.config.codeAction.onSave]
enable = true
mode = "fixAll"

[language-server.eslint-ls.config.workingDirectory]
mode = "location"

# LANGUAGE SPECIFIC
[[language]]
name = "go"
formatter = { command = "goimports" }

[language-server.gopls]
command = "gopls"
args = ["-logfile=/tmp/gopls.log",  "serve"]
[language-server.gopls.config]
"ui.diagnostic.staticcheck" = true

[language-server.gopls.config.hints]
assignVariableTypes = true
constantValues = true
functionTypeParameters = true
parameterNames = true
rangeVariableTypes = true

[[language]]
name = "svelte"
scope = "source.svelte"
injection-regex = "(svelte|.server.ts)"
file-types = ["svelte", "+page.server.ts", "+layout.server.ts", "+endpoint.ts"]
roots = ["package.json", "svelte.config.js", ".git", ".svelte-kit"]
formatter = { command = "prettier", args = ["--parser", "svelte"] }
language-servers = [ { name = "tailwindcss-ls", except-features = ["hover"] }, "svelteserver", "emmet-ls", "eslint-ls" , "svelte-language-server", "eslint" ]

[language-server.svelteserver]
command = "svelteserver"
args = ["--stdio"]

[language-server.svelteserver.config]
"ui.diagnostic.staticcheck" = true

[language-server.svelteserver.config.hints]
assignVariableTypes = true
constantValues = true
functionTypeParameters = true
parameterNames = true
rangeVariableTypes = true

[language-server.svelte-language-server]
command = "svelte-language-server"
args = ["--stdio"]

[language-server.svelte-language-server.config]
"ui.diagnostic.staticcheck" = true

[language-server.svelte-language-server.config.hints]
assignVariableTypes = true
constantValues = true
functionTypeParameters = true
parameterNames = true
rangeVariableTypes = true

[[language]]
name = "typescript"
file-types = ["ts", "tsx"]
language-servers = [{ name = "tailwindcss-ls", except-features = ["hover"] }, "typescript-language-server", "emmet-ls", "eslint-ls"]
formatter = { command = "prettier" }

[language-server.typescript-language-server]
command = "typescript-language-server"
args = ["--stdio"]

[language-server.typescript-language-server.config]
"ui.diagnostic.staticcheck" = true

[language-server.typescript-language-server.config.hints]
assignVariableTypes = true
constantValues = true
functionTypeParameters = true
parameterNames = true
rangeVariableTypes = true

[[language]]
name = "javascript"
file-types = ["js", "jsx"]
language-servers = [{ name = "tailwindcss-ls", except-features = ["hover"] }, "typescript-language-server", "emmet-ls", "eslint-ls"]
formatter = { command = "prettier" }

[[language]]
name = "html"
language-servers = [ "tailwindcss-ls", "vscode-html-language-server" , "emmet-ls", "eslint-ls"]
formatter = { command = "prettier" }

[language-server.vscode-html-language-server.config]
"ui.diagnostic.staticcheck" = true

[language-server.vscode-html-language-server.config.hints]
assignVariableTypes = true
constantValues = true
functionTypeParameters = true
parameterNames = true
rangeVariableTypes = true

[[language]]
name = "css"
language-servers = [ { name="tailwindcss-ls", except-features = ["hover"] }, "vscode-css-language-server" , "emmet-ls" , "eslint-ls"]
formatter = { command = "prettier" }

[language-server.vscode-css-language-server.config]
"ui.diagnostic.staticcheck" = true

[language-server.vscode-css-language-server.config.hints]
assignVariableTypes = true
constantValues = true
functionTypeParameters = true
parameterNames = true
rangeVariableTypes = true

[[language]]
name = "scss"
language-servers = [ { name="tailwindcss-ls", except-features = ["hover"] }, "vscode-css-language-server" , "emmet-ls" , "eslint-ls"]
formatter = { command = "prettier" }

[[language]]
name = "fish"
scope = "source.fish"
injection-regex = "fish"
file-types = ["fish"]
shebangs = ["fish"]
comment-token = "#"
language-servers = ["fish-lsp"]
indent = { tab-width = 4, unit = "    " }
auto-format = true
formatter = { command = "fish_indent" }

[[grammar]]
name = "fish"
source = { git = "https://github.com/ram02z/tree-sitter-fish", rev = "a78aef9abc395c600c38a037ac779afc7e3cc9e0" }

[[language]]
name = "json"
scope = "source.json"
injection-regex = "json"
file-types = [
  "json",
  "arb",
  "ipynb",
  "geojson",
  "gltf",
  "webmanifest",
  { glob = "flake.lock" },
  { glob = ".babelrc" },
  { glob = ".bowerrc" },
  { glob = ".jscrc" },
  "js.map",
  "ts.map",
  "css.map",
  { glob = ".jslintrc" },
  "jsonl",
  "jsonld",
  { glob = ".vuerc" },
  { glob = "composer.lock" },
  { glob = ".watchmanconfig" },
  "avsc",
  "ldtk",
  "ldtkl",
  { glob = ".swift-format" },
  "sublime-build",
  "sublime-color-scheme",
  "sublime-commands",
  "sublime-completions",
  "sublime-keymap",
  "sublime-macro",
  "sublime-menu",
  "sublime-mousemap",
  "sublime-project",
  "sublime-settings",
  "sublime-theme",
  "sublime-workspace"
]

language-servers = [ "vscode-json-language-server" ]
auto-format = true
indent = { tab-width = 2, unit = "  " }

[[grammar]]
name = "json"
source = { git = "https://github.com/tree-sitter/tree-sitter-json", rev = "73076754005a460947cafe8e03a8cf5fa4fa2938" }

[[language]]
name = "jsonc"
scope = "source.json"
injection-regex = "jsonc"
file-types = ["jsonc", { glob = "tsconfig.json" }, { glob = "bun.lock" }]
comment-token = "//"
block-comment-tokens = { start = "/*", end = "*/" }
grammar = "json"
language-servers = [ "vscode-json-language-server" ]
auto-format = true
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "json5"
scope = "source.json5"
injection-regex = "json5"
file-types = ["json5"]
language-servers = []
comment-token = "//"
indent = { tab-width = 4, unit = "    " }
# https://json5.org

[[grammar]]
name = "json5"
source = { git = "https://github.com/Joakker/tree-sitter-json5", rev = "c23f7a9b1ee7d45f516496b1e0e4be067264fa0d" }

[debugger.lldb]
name = "lldb-vscode"
transport = "stdio"
command = "lldb-vscode"

# [language-server.eslint.config]
# # format = true
# nodePath = ""
# # onIgnoredFiles = "off"
# # packageManager = "yarn"
# quiet = false
# rulesCustomizations = []
# run = "onType"
# # useESLintClass = false
# validate = "on"
# codeAction = { disableRuleComment = { enable = true, location = "separateLine" }, showDocumentation = { enable = true } }
# # codeActionsOnSave = { mode = "all" }
# experimental = {}
# problems = { shortenToSingleLine = false }
# workingDirectory = { mode = "auto" }
