# LSP downloads list for all languages available to helix
# https://github.com/helix-editor/helix/wiki/Language-Server-Configurations

# Language server definitions (keep these at the top)
[language-server.vscode-html-language-server]
command = "vscode-html-language-server"
args = ["--stdio"]

[language-server.vscode-css-language-server]
command = "vscode-css-language-server"
args = ["--stdio"]

[language-server.tailwindcss-ls]
command = "tailwindcss-language-server"
args = ["--stdio"]

[language-server.eslint]
command = "vscode-eslint-language-server"
args = ["--stdio"]

# Language-specific configurations
[language-server.gopls]
command = "gopls"
config = { "gofumpt" = true, "local" = "goimports", "semanticTokens" = true, "staticcheck" = true, "verboseOutput" = true, "analyses" = { "fieldalignment" = true, "nilness" = true, unusedparams = true, unusedwrite = true, useany = true }, usePlaceholders = true, completeUnimported = true, hints = { "assignVariableType" = true, "compositeLiteralFields" = true, "compositeLiteralTypes" = true, "constantValues" = true, "functionTypeParameters" = true, "parameterNames" = true, "rangeVariableTypes" = true } }

[[language]]
name = "go"
scope = "source.go"
roots = ["go.work", "go.mod"]
auto-format = false
comment-token = "//"
indent = { tab-width = 4, unit = "    " }
language-servers = [ "gopls"]
formatter = { command = "goimports" }

# PYTHON CONFIGURATION
[[language]]
name = "python"
scope = "source.python"
injection-regex = "python"
file-types = ["py","pyi","py3","pyw",".pythonstartup",".pythonrc"]
shebangs = ["python"]
roots = [".", "pyproject.toml", "pyrightconfig.json"]
comment-token = "#"
language-servers = ["pyright", "ruff"]
indent = { tab-width = 4, unit = "    " }
auto-format = false

[language.formatter]
command = "black"
args = [
  "-",
  "--quiet",
  "--line-length=88"
]

[language-server.pyright]
command = "pyright-langserver"
args = ["--stdio"]

[language-server.pyright.config]
reportMissingTypeStubs = false

[language-server.pyright.config.python.analysis]
typeCheckingMode = "basic"
autoImportCompletions = true

[language-server.ruff]
command = "ruff-lsp"

[language-server.ruff.config]
settings = {args = []}

[[language]]
name = "javascript"
scope = "source.js"
injection-regex = "(js|javascript|jsx)"
file-types = ["js", "mjs", "cjs"]
shebangs = ["node"]
roots = ["package.json", "tsconfig.json", "jsconfig.json", ".git"]
auto-format = false
indent = { tab-width = 2, unit = "  " }
formatter = { command = "prettier", args = ["--parser", "babel"] }
language-servers = ["typescript-language-server", "eslint"]

[[language]]
name = "typescript"
scope = "source.ts"
injection-regex = "(ts|typescript|tsx)"
file-types = ["ts", "mts", "cts"]
roots = ["package.json", "tsconfig.json", ".git"]
auto-format = false
indent = { tab-width = 2, unit = "  " }
formatter = { command = "prettier", args = ["--parser", "typescript"] }
language-servers = ["typescript-language-server", "eslint"]

[[language]]
name = "svelte"
scope = "source.svelte"
injection-regex = "(svelte|.server.ts)"
file-types = ["svelte", "+page.server.ts"]
roots = ["package.json", "svelte.config.js", ".git", ".svelte-kit"]
auto-format = false
indent = { tab-width = 2, unit = "  " }
formatter = { command = "prettier", args = ["--parser", "svelte"] }
language-servers = [ { name = "tailwindcss-ls", except-features = ["hover"] }, "svelteserver", "emmet-ls", "eslint-ls" , "svelte-language-server", "eslint" ]
# language-servers = ["svelte-language-server", "svelteserver", "eslint"]

 # CSS CONFIGURATION
[[language]]
name = "css"
scope = "source.css"
file-types = ["css"]
language-servers = ["vscode-css-language-server"]
formatter = { command = "prettier", args = ["--parser", "css"] }
auto-format = false

# C
[[language]]
name = "c"
scope = "source.c"
file-types = ["c"]
language-servers = ["ccls"]
formatter = { command = "clang-format" }
auto-format = false

[debugger.lldb]
name = "lldb-vscode"
transport = "stdio"
command = "lldb-vscode"

[debugger.python]
name = "debugpy"
transport = "stdio"
command = "python"
args = ["-m", "debugpy.adapter"]

[language-server.eslint.config]
# format = true
nodePath = ""
# onIgnoredFiles = "off"
# packageManager = "yarn"
quiet = false
rulesCustomizations = []
run = "onType"
# useESLintClass = false
validate = "on"
codeAction = { disableRuleComment = { enable = true, location = "separateLine" }, showDocumentation = { enable = true } }
# codeActionsOnSave = { mode = "all" }
experimental = {}
problems = { shortenToSingleLine = false }
workingDirectory = { mode = "auto" }
