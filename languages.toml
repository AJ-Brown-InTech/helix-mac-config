# LANGUAGE SERVERS CONFIGURATION
[language-server.astro-ls]
command = "astro-ls"
args = ["--stdio"]
config = { typescript = { tsdk = "~/.volta/tools/image/packages/typescript/lib/node_modules/typescript/lib" }, environment = "node"}

[language-server.tailwindcss-ls]
command = "tailwindcss-language-server"
args = ["--stdio"]
config = { userLanguages = { astro = "html", "*.astro" = "html", svelte = "html", "*.svelte" = "html", rust = "html", "*.rs" = "html" }}

[language-server.emmet-ls]
command = "emmet-language-server"
args = ["--stdio"]

# ESLint configuration
# Note: The ESLint language server is configured to use the ESLint CLI engine.
# This means it will use the ESLint configuration from your project.
# Ensure you have ESLint installed in your project.
# You can install it using npm or yarn:
# npm install eslint --save-dev
# yarn add eslint --dev
[language-server.eslint-ls]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.eslint-ls.config]
validate = "on"

[language-server.eslint-ls.config.experimental]
useFlatConfig = false

# Empty array for rule customizations
language-server.eslint-ls.config.rulesCustomizations = []

[language-server.eslint-ls.config.problems]
shortenToSingleLine = false

language-server.eslint-ls.config.nodePath = ""

[language-server.eslint-ls.config.codeAction.disableRuleComment]
enable = true
location = "separateLine"

[language-server.eslint-ls.config.codeAction.showDocumentation]
enable = true

[language-server.eslint-ls.config.codeAction.onSave]
enable = true
mode = "fixAll"

[language-server.eslint-ls.config.workingDirectory]
mode = "location"

[language-server.eslint-ls.config.run]
# Note: Based on your original, you likely meant:
run = "onType"

# GO
[[language]]
name = "go"
formatter = { command = "goimports" }
language-servers = ["gopls"]

[language-server.gopls]
command = "gopls"
args = ["-logfile=/tmp/gopls.log", "serve"]

# [language-server.gopls.config]
# "ui.diagnostic.staticcheck" = true
[language-server.gopls.config.ui.diagnostic]
staticcheck = true

[language-server.gopls.config.hints]
assignVariableTypes = true
constantValues = true
functionTypeParameters = true
parameterNames = true
rangeVariableTypes = true

[debugger.dlv]
name = "dlv"
command = "dlv"
args = ["dap"]
transport = "stdio"
templates = []

# SVELTE
[[language]]
name = "svelte"
scope = "source.svelte"
file-types = ["svelte", "ts"]
roots = ["package.json", "svelte.config.js", ".git", ".svelte-kit"]
formatter = { command = "prettier" }
language-servers = [ { name = "tailwindcss-ls", except-features = ["hover"] }, "emmet-ls", "eslint-ls", "typescript-language-server", "svelte-language-server"]

[[grammar]]
name = "svelte"
source = { git = "https://github.com/Himujjal/tree-sitter-svelte" } # or your fork with query support

# TYPESCRIPT & REACT (TSX)
[[language]]
name = "typescript"
file-types = ["ts","tsx"]
formatter = { command = "prettier" }
language-servers = [{ name = "tailwindcss-ls", except-features = ["hover"] }, "typescript-language-server", "emmet-ls", "eslint-ls"]

[language-server.typescript-language-server]
command = "typescript-language-server"
args = ["--stdio"]

[[language]]
name = "javascript"
file-types = ["js"]
formatter = { command = "prettier" }
language-servers = [{ name = "tailwindcss-ls", except-features = ["hover"] }, "typescript-language-server", "emmet-ls", "eslint-ls"]

[[language]]
name = "jsx"
file-types = ["jsx"]
formatter = { command = "prettier" }
language-servers = [{ name = "tailwindcss-ls", except-features = ["hover"] }, "typescript-language-server", "emmet-ls", "eslint-ls"]

[[language]]
name = "tsx"
file-types = ["tsx"]
formatter = { command = "prettier" }
language-servers = [{ name = "tailwindcss-ls", except-features = ["hover"] }, "typescript-language-server", "emmet-ls", "eslint-ls"]

# HTML
[[language]]
name = "html"
formatter = { command = "prettier" }
language-servers = [{ name = "tailwindcss-ls", except-features = ["hover"] }, "vscode-html-language-server", "emmet-ls", "eslint-ls"]

# CSS
[[language]]
name = "css"
formatter = { command = "prettier" }
language-servers = [{ name = "tailwindcss-ls", except-features = ["hover"] }, "vscode-css-language-server", "emmet-ls", "eslint-ls"]

[[language]]
name = "scss"
formatter = { command = "prettier" }
language-servers = [{ name = "tailwindcss-ls", except-features = ["hover"] }, "vscode-css-language-server",  "emmet-ls", "eslint-ls"]

# FISH
[[language]]
name = "fish"
scope = "source.fish"
injection-regex = "fish"
file-types = ["fish"]
shebangs = ["fish"]
comment-token = "#"
language-servers = ["fish-lsp"]
indent = { tab-width = 4, unit = "    " }
auto-format = true
formatter = { command = "fish_indent" }

[[grammar]]
name = "fish"
source = { git = "https://github.com/ram02z/tree-sitter-fish", rev = "a78aef9abc395c600c38a037ac779afc7e3cc9e0" }

[[language]]
name = "json"
scope = "source.json"
injection-regex = "json"
file-types = ["json", "jsonl", "jsonld", { glob = ".babelrc" }, "js.map", "ts.map"]
language-servers = ["vscode-json-language-server"]
formatter = { command = "prettier" }

[language-server.vscode-json-language-server]
command = "vscode-json-language-server"
args = ["--stdio"]

[[language]]
name = "jsonc"
scope = "source.json"
injection-regex = "jsonc"
file-types = ["jsonc", { glob = "tsconfig.json" }, { glob = "bun.lock" }]
comment-token = "//"
block-comment-tokens = { start = "/*", end = "*/" }
grammar = "json"
language-servers = ["vscode-json-language-server"]
formatter = { command = "prettier" }

[[language]]
name = "json5"
scope = "source.json5"
injection-regex = "json5"
file-types = ["json5"]
language-servers = ["vscode-json-language-server"]
formatter = { command = "prettier" }

[[grammar]]
name = "json"
source = { git = "https://github.com/tree-sitter/tree-sitter-json", rev = "73076754005a460947cafe8e03a8cf5fa4fa2938" }

[[grammar]]
name = "json5"
source = { git = "https://github.com/Joakker/tree-sitter-json5", rev = "c23f7a9b1ee7d45f516496b1e0e4be067264fa0d" }


# Rust language configuration
[[language]]
name = "rust"
auto-format = true
language-servers = ["rust-analyzer", "tailwindcss-ls"]
formatter = { command = "bash", args = ["-c", "rustfmt | dx fmt -f -"] }
indent = { tab-width = 4, unit = "    " }

[language-server.rust-analyzer]
command = "rust-analyzer"

[language-server.rust-analyzer.config]
inlayHints.bindingModeHints.enable = false
inlayHints.closingBraceHints.minLines = 10
inlayHints.closureReturnTypeHints.enable = "with_block"
inlayHints.discriminantHints.enable = "fieldless"
inlayHints.lifetimeElisionHints.enable = "skip_trivial"
inlayHints.typeHints.hideClosureInitialization = false

[language-server.rust-analyzer.config.check]
command = "clippy"

# DEBUGGING
[debugger.lldb]
name = "lldb-vscode"
transport = "stdio"
command = "lldb-vscode"

# Global configuration for all prettier instances
[language-server.prettier]
command = "prettier"
args = ["--stdio"]
[language-server.prettier.config]
hover = true
useWorkspaceDependencies = true
useGlobalPrettier = true
useGlobalEslint = true
useGlobalTypescript = true
useGlobalStylelint = true
useGlobalJson = true

# SQL
[[language]]
name = "sql"
file-types = ["sql", "dsql"]
language-servers = ["sqls"]
comment-token = "--"
block-comment-tokens = { start = "/*", end = "*/" }
indent = { tab-width = 4, unit = "    " }
injection-regex = "sql"
formatter = { command = "sql-formatter", args = ["--language", "sql"] }
auto-format = true

[language-server.sqls]
command = "sqls"
args = ["--stdio"]

[[grammar]]
name = "sql"
source = { git = "https://github.com/DerekStride/tree-sitter-sql", rev = "b9d109588d5b5ed986c857464830c2f0bef53f18" }
